{"ast":null,"code":"export const getUser = () => {\n  const userStr = sessionStorage.getItem('user');\n\n  if (userStr) {\n    return JSON.parse(userStr);\n  } else return null;\n};\nexport const getToken = () => {\n  return sessionStorage.getItem('token') || null;\n};\nexport const getUserType = () => {\n  return sessionStorage.getItem('userType');\n};\nexport const getId = () => {\n  return sessionStorage.getItem('id');\n};\nexport const removeUserSession = () => {\n  sessionStorage.removeItem('token');\n  sessionStorage.removeItem('user');\n  sessionStorage.removeItem('userType');\n  sessionStorage.removeItem('id');\n};\nexport const getLocations = () => {\n  sessionStorage.getItem('locations');\n};\nexport const setUserSession = (token, user, userType, id) => {\n  sessionStorage.setItem('token', token);\n  sessionStorage.setItem('user', JSON.stringify(user));\n  sessionStorage.setItem('userType', userType);\n  sessionStorage.setItem('id', id);\n\n  if (user.role === \"Host\") {\n    var locations = null;\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + getToken()\n      }\n    };\n    fetch('http://localhost:5000/api/locations/getByHost/' + user.id, requestOptions).then(res => res.json()).then(data => {\n      locations = data;\n    }).catch(console.log);\n    sessionStorage.setItem('locations', locations);\n  } else {\n    sessionStorage.setItem('locations', \"TEST\");\n  }\n\n  window.location.reload();\n};","map":{"version":3,"sources":["C:/Users/calin/Desktop/uni/SD/Actualizat/sd-lab-30432-diaconuccalin/Server/CampingPlatformFrontend/react-api/src/utils/Common.js"],"names":["getUser","userStr","sessionStorage","getItem","JSON","parse","getToken","getUserType","getId","removeUserSession","removeItem","getLocations","setUserSession","token","user","userType","id","setItem","stringify","role","locations","requestOptions","method","headers","fetch","then","res","json","data","catch","console","log","window","location","reload"],"mappings":"AAAA,OAAO,MAAMA,OAAO,GAAG,MAAM;AACzB,QAAMC,OAAO,GAAGC,cAAc,CAACC,OAAf,CAAuB,MAAvB,CAAhB;;AACA,MAAGF,OAAH,EAAY;AAAE,WAAOG,IAAI,CAACC,KAAL,CAAWJ,OAAX,CAAP;AAA4B,GAA1C,MACK,OAAO,IAAP;AACR,CAJM;AAMP,OAAO,MAAMK,QAAQ,GAAG,MAAM;AAC1B,SAAOJ,cAAc,CAACC,OAAf,CAAuB,OAAvB,KAAmC,IAA1C;AACH,CAFM;AAIP,OAAO,MAAMI,WAAW,GAAG,MAAM;AAC7B,SAAOL,cAAc,CAACC,OAAf,CAAuB,UAAvB,CAAP;AACH,CAFM;AAIP,OAAO,MAAMK,KAAK,GAAG,MAAM;AACvB,SAAON,cAAc,CAACC,OAAf,CAAuB,IAAvB,CAAP;AACH,CAFM;AAIP,OAAO,MAAMM,iBAAiB,GAAG,MAAM;AACnCP,EAAAA,cAAc,CAACQ,UAAf,CAA0B,OAA1B;AACAR,EAAAA,cAAc,CAACQ,UAAf,CAA0B,MAA1B;AACAR,EAAAA,cAAc,CAACQ,UAAf,CAA0B,UAA1B;AACAR,EAAAA,cAAc,CAACQ,UAAf,CAA0B,IAA1B;AACH,CALM;AAOP,OAAO,MAAMC,YAAY,GAAG,MAAM;AAC9BT,EAAAA,cAAc,CAACC,OAAf,CAAuB,WAAvB;AACH,CAFM;AAIP,OAAO,MAAMS,cAAc,GAAG,CAACC,KAAD,EAAQC,IAAR,EAAcC,QAAd,EAAwBC,EAAxB,KAA+B;AACzDd,EAAAA,cAAc,CAACe,OAAf,CAAuB,OAAvB,EAAgCJ,KAAhC;AACAX,EAAAA,cAAc,CAACe,OAAf,CAAuB,MAAvB,EAA+Bb,IAAI,CAACc,SAAL,CAAeJ,IAAf,CAA/B;AACAZ,EAAAA,cAAc,CAACe,OAAf,CAAuB,UAAvB,EAAmCF,QAAnC;AACAb,EAAAA,cAAc,CAACe,OAAf,CAAuB,IAAvB,EAA6BD,EAA7B;;AAEA,MAAGF,IAAI,CAACK,IAAL,KAAc,MAAjB,EAAyB;AACrB,QAAIC,SAAS,GAAG,IAAhB;AAEA,UAAMC,cAAc,GAAG;AACnBC,MAAAA,MAAM,EAAE,KADW;AAEnBC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,yBAAiB,YAAYjB,QAAQ;AAFhC;AAFU,KAAvB;AAQAkB,IAAAA,KAAK,CAAC,mDAAmDV,IAAI,CAACE,EAAzD,EAA6DK,cAA7D,CAAL,CACCI,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEOG,IAAD,IAAU;AACZR,MAAAA,SAAS,GAAGQ,IAAZ;AACH,KAJD,EAKCC,KALD,CAKOC,OAAO,CAACC,GALf;AAOA7B,IAAAA,cAAc,CAACe,OAAf,CAAuB,WAAvB,EAAoCG,SAApC;AACH,GAnBD,MAmBO;AACHlB,IAAAA,cAAc,CAACe,OAAf,CAAuB,WAAvB,EAAoC,MAApC;AACH;;AAEDe,EAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACH,CA9BM","sourcesContent":["export const getUser = () => {\r\n    const userStr = sessionStorage.getItem('user');\r\n    if(userStr) { return JSON.parse(userStr);}\r\n    else return null;\r\n}\r\n\r\nexport const getToken = () => {\r\n    return sessionStorage.getItem('token') || null;\r\n}\r\n\r\nexport const getUserType = () => {\r\n    return sessionStorage.getItem('userType');\r\n}\r\n\r\nexport const getId = () => {\r\n    return sessionStorage.getItem('id');\r\n}\r\n\r\nexport const removeUserSession = () => {\r\n    sessionStorage.removeItem('token');\r\n    sessionStorage.removeItem('user');\r\n    sessionStorage.removeItem('userType');\r\n    sessionStorage.removeItem('id');\r\n}\r\n\r\nexport const getLocations = () => {\r\n    sessionStorage.getItem('locations');\r\n}\r\n\r\nexport const setUserSession = (token, user, userType, id) => {\r\n    sessionStorage.setItem('token', token);\r\n    sessionStorage.setItem('user', JSON.stringify(user));\r\n    sessionStorage.setItem('userType', userType);\r\n    sessionStorage.setItem('id', id);\r\n\r\n    if(user.role === \"Host\") {\r\n        var locations = null;\r\n        \r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + getToken()\r\n            }\r\n        };\r\n\r\n        fetch('http://localhost:5000/api/locations/getByHost/' + user.id, requestOptions)\r\n        .then(res => res.json())\r\n        .then((data) => {\r\n            locations = data;\r\n        })\r\n        .catch(console.log);\r\n\r\n        sessionStorage.setItem('locations', locations);\r\n    } else {\r\n        sessionStorage.setItem('locations', \"TEST\");\r\n    }\r\n\r\n    window.location.reload();\r\n}"]},"metadata":{},"sourceType":"module"}